<!DOCTYPE html>
<html>
  <head>
    <title>Mxen Game Interface</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f5f5f5;
      }

      .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
      }

      h1 {
        text-align: center;
        margin-bottom: 20px;
      }

      .data-section {
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-bottom: 20px;
      }

      .history-section,
      .participants-section {
        border-top: 1px solid #ccc;
        padding: 20px;
        margin-top: 20px;
      }

      ul {
        list-style: none;
        padding: 0;
      }

      li {
        margin-bottom: 5px;
      }

      .button-section {
        text-align: center;
        margin-top: 20px;
      }

      .action-button {
        background-color: #3498db;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
      }

      .action-button:disabled {
        background-color: #ccc;
        cursor: not-allowed;
      }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/web3@1.5.2/dist/web3.min.js"></script>
  </head>
  <body>
    <div class="container">
      <h1>Mxen Game Interface</h1>

      <div class="data-section">
        <p><strong>Time Left:</strong> <span id="timeLeft">Loading...</span></p>
        <p><strong>Mxen in Pool:</strong> <span id="mxenInPool">Loading...</span></p>
      </div>

      <div class="history-section">
        <h2>Bidding History</h2>
        <ul id="biddingHistory"></ul>
      </div>

      <div class="participants-section">
        <h2>Participants</h2>
        <ul id="participantList"></ul>
      </div>

      <div class="button-section">
        <button id="bidButton" class="action-button" disabled>Bid 10,000,000 Mxen</button>
        <button id="claimButton" class="action-button" disabled>Claim Reward</button>
      </div>
    </div>

    <script>
      const contractAddress = "0xadc0b2daeEdE93b19c4e25f5c8d208c98D271afA";
      const contractABI = [
        {
          inputs: [
            {
              internalType: "address",
              name: "_mxenToken",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "_gameDurationInSeconds",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "bidder",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          name: "BidPlaced",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [],
          name: "GameEnded",
          type: "event",
        },
        {
          inputs: [],
          name: "claimReward",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "endGame",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "gameDuration",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "gameStatus",
          outputs: [
            {
              internalType: "enum MxenGame.GameStatus",
              name: "",
              type: "uint8",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "highestBid",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "highestBidder",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "mxenToken",
          outputs: [
            {
              internalType: "contract IERC20",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          name: "placeBid",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "startTime",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "startGame",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "endTime",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          name: "withdrawTokens",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
      ];

      async function initApp() {
        if (typeof window.ethereum !== "undefined") {
          window.web3 = new Web3(window.ethereum);
          try {
            await window.ethereum.enable();
            const contract = new web3.eth.Contract(contractABI, contractAddress);

            updateUI(contract);
          } catch (error) {
            console.error("User denied account access or other error:", error);
          }
        } else {
          console.error("Metamask not detected");
        }
      }

      async function updateUI(contract) {
        const timeLeftElement = document.getElementById("timeLeft");
        const mxenInPoolElement = document.getElementById("mxenInPool");
        const biddingHistoryList = document.getElementById("biddingHistory");
        const participantList = document.getElementById("participantList");
        const bidButton = document.getElementById("bidButton");
        const claimButton = document.getElementById("claimButton");

        // Fetch data from the contract and update the DOM elements
        try {
          const timeLeft = await contract.methods.getTimeLeft().call();
          timeLeftElement.textContent = timeLeft + " seconds left";

          const mxenInPool = await contract.methods.getMxenInPool().call();
          mxenInPoolElement.textContent = mxenInPool + " Mxen";

          const bids = await contract.methods.getBiddingHistory().call();
          biddingHistoryList.innerHTML = "";
          bids.forEach((bid) => {
            const listItem = document.createElement("li");
            listItem.textContent = `${bid[0]}: ${bid[1]} Mxen`;
            biddingHistoryList.appendChild(listItem);
          });

          const participants = await contract.methods.getParticipants().call();
          participantList.innerHTML = "";
          participants.forEach((participant) => {
            const listItem = document.createElement("li");
            listItem.textContent = participant;
            participantList.appendChild(listItem);
          });

          // Add your logic to enable/disable buttons based on game status and user interactions
          // Example:
          // bidButton.disabled = timeLeft === 0;
          // claimButton.disabled = // some logic based on game status
        } catch (error) {
          console.error("Error fetching contract data:", error);
        }
      }

      window.addEventListener("load", initApp);
    </script>
  </body>
</html>
